From 332747b988c9b0f0a34482e6ccc162b48ada3756 Mon Sep 17 00:00:00 2001
From: John Andersen <john.s.andersen@intel.com>
Date: Tue, 12 Nov 2019 17:28:04 -0500
Subject: [PATCH 6/9] X86: Use KVM CR pin MSRs

Strengthen existing control register pinning when running
paravirtualized under KVM. Check which bits KVM supports pinning for
each control register and only pin supported bits which are already
pinned via the existing native protection. Write to KVM CR0/4 pinned
MSRs to enable pinning.

Initiate KVM assisted pinning directly following the setup of native
pinning on boot CPU. For non-boot CPUs initiate paravirtualized pinning
on CPU identification.

Identification of non-boot CPUs takes place after the boot CPU has setup
native CR pinning. Therefore, non-boot CPUs access pinned bits setup by
the boot CPU for CR4 and request that those be pinned. For CR0, WP is
the only bit pinned and does not require feature identification, and
therefore is always pinned. Native pinning hardcodes WP into it's check.
As such there is no equivalent of the cr4_pinned_bits variable. All CPUs
request paravirtualized pinning of the same bits which are already
pinned natively.

Paravirtualized control register pinning will be enabled by default if
KVM guest support is enabled. Should the user find that paravirtualized
pinning causes issues for them, it can be disabled using the new
disable_pv_cr_pin command line option, or via
CONFIG_PARAVIRT_CR_PINNING.

Signed-off-by: John Andersen <john.s.andersen@intel.com>
---
 .../admin-guide/kernel-parameters.txt         | 11 ++++
 arch/x86/Kconfig                              | 15 +++++
 arch/x86/include/asm/kvm_para.h               | 19 ++++++
 arch/x86/kernel/cpu/common.c                  | 11 ++++
 arch/x86/kernel/kvm.c                         | 64 +++++++++++++++++++
 5 files changed, 120 insertions(+)

diff --git a/Documentation/admin-guide/kernel-parameters.txt b/Documentation/admin-guide/kernel-parameters.txt
index 526d65d8573a..7b6e81a79a28 100644
--- a/Documentation/admin-guide/kernel-parameters.txt
+++ b/Documentation/admin-guide/kernel-parameters.txt
@@ -968,6 +968,17 @@
 			MTRR settings.  This parameter disables that behavior,
 			possibly causing your machine to run very slowly.
 
+	disable_pv_cr_pin [SECURITY,X86]
+			Disable paravirtualized control register pinning. By
+			default, when running paravirutalized under KVM and when
+			kexec support is either not compiled in or disabled, the
+			kernel will request that KVM never allow the disabling
+			of kernel protection features set in CPU control
+			registers. Specifying this option tells the kernel not
+			to request protection of those bits. Native pinning will
+			still be in effect. However, the protection provided by
+			it is not as strong as paravirtualized pinning.
+
 	disable_timer_pin_1 [X86]
 			Disable PIN 1 of APIC timer
 			Can be useful to work around chipset bugs.
diff --git a/arch/x86/Kconfig b/arch/x86/Kconfig
index f6946b81f74a..9d5eabb1173d 100644
--- a/arch/x86/Kconfig
+++ b/arch/x86/Kconfig
@@ -841,6 +841,21 @@ config PARAVIRT_TIME_ACCOUNTING
 config PARAVIRT_CLOCK
 	bool
 
+config PARAVIRT_CR_PINNING
+	bool "Paravirtualized Control Register Pinning"
+	default y
+	depends on (!KEXEC_CORE || KEXEC_FILE)
+	help
+	  When running as a paravirtualized guest under KVM, make use of KVM's
+	  control register pinning capabilities. Paravirtualized control
+	  register pinning prevents attackers from using ROP/JOP/etc. to disable
+	  protections such as WP, SMAP, SMEP, and UMIP.
+
+	  To enable this option if kexec is enabled, the kexec file based system
+	  call must also be enabled. This is necessary because the file based
+	  system call preforms compatibility checks which cannot be done by the
+	  older load system call.
+
 config JAILHOUSE_GUEST
 	bool "Jailhouse non-root cell support"
 	depends on X86_64 && PCI
diff --git a/arch/x86/include/asm/kvm_para.h b/arch/x86/include/asm/kvm_para.h
index 338119852512..06052134901d 100644
--- a/arch/x86/include/asm/kvm_para.h
+++ b/arch/x86/include/asm/kvm_para.h
@@ -113,6 +113,13 @@ static inline void kvm_spinlock_init(void)
 }
 #endif /* CONFIG_PARAVIRT_SPINLOCKS */
 
+extern int kvm_paravirt_cr_pinning_enabled __ro_after_init;
+void __init kvm_paravirt_cr_pinning_init(void);
+void kvm_setup_paravirt_cr_pinning(unsigned long cr0_pinned_bits,
+				   unsigned long cr0_pinned_mask,
+				   unsigned long cr4_pinned_bits,
+				   unsigned long cr4_pinned_mask);
+
 #else /* CONFIG_KVM_GUEST */
 #define kvm_async_pf_task_wait_schedule(T) do {} while(0)
 #define kvm_async_pf_task_wake(T) do {} while(0)
@@ -146,6 +153,18 @@ static __always_inline bool kvm_handle_async_pf(struct pt_regs *regs, u32 token)
 {
 	return false;
 }
+
+static int kvm_paravirt_cr_pinning_enabled __ro_after_init;
+
+static inline void __init kvm_paravirt_cr_pinning_init(void)
+{
+	kvm_paravirt_cr_pinning_enabled = 0;
+}
+
+static inline void kvm_setup_paravirt_cr_pinning(unsigned long cr0_pinned_bits,
+						 unsigned long cr4_pinned_bits)
+{
+}
 #endif
 
 #endif /* _ASM_X86_KVM_PARA_H */
diff --git a/arch/x86/kernel/cpu/common.c b/arch/x86/kernel/cpu/common.c
index 5c6d34fec84c..723e95dd13fe 100644
--- a/arch/x86/kernel/cpu/common.c
+++ b/arch/x86/kernel/cpu/common.c
@@ -22,6 +22,7 @@
 #include <linux/io.h>
 #include <linux/syscore_ops.h>
 #include <linux/pgtable.h>
+#include <linux/kvm_para.h>
 
 #include <asm/cmdline.h>
 #include <asm/stackprotector.h>
@@ -441,6 +442,11 @@ static void __init setup_cr_pinning(void)
 {
 	cr4_pinned_bits = this_cpu_read(cpu_tlbstate.cr4) & cr4_pinned_mask;
 	static_key_enable(&cr_pinning.key);
+
+	kvm_setup_paravirt_cr_pinning(X86_CR0_WP,
+				      X86_CR0_WP,
+				      cr4_pinned_bits,
+				      cr4_pinned_mask);
 }
 
 static __init int x86_nofsgsbase_setup(char *arg)
@@ -1678,6 +1684,11 @@ void identify_secondary_cpu(struct cpuinfo_x86 *c)
 	validate_apic_and_package_id(c);
 	x86_spec_ctrl_setup_ap();
 	update_srbds_msr();
+
+	kvm_setup_paravirt_cr_pinning(X86_CR0_WP,
+				      X86_CR0_WP,
+				      cr4_pinned_bits,
+				      cr4_pinned_mask);
 }
 
 static __init int setup_noclflush(char *arg)
diff --git a/arch/x86/kernel/kvm.c b/arch/x86/kernel/kvm.c
index 7f57ede3cb8e..e7a9a7355f43 100644
--- a/arch/x86/kernel/kvm.c
+++ b/arch/x86/kernel/kvm.c
@@ -26,6 +26,7 @@
 #include <linux/kprobes.h>
 #include <linux/nmi.h>
 #include <linux/swait.h>
+#include <linux/init.h>
 #include <asm/timer.h>
 #include <asm/cpu.h>
 #include <asm/traps.h>
@@ -36,6 +37,7 @@
 #include <asm/hypervisor.h>
 #include <asm/tlb.h>
 #include <asm/cpuidle_haltpoll.h>
+#include <asm/cmdline.h>
 #include <asm/ptrace.h>
 #include <asm/svm.h>
 
@@ -743,6 +745,7 @@ static void __init kvm_apic_init(void)
 static void __init kvm_init_platform(void)
 {
 	kvmclock_init();
+	kvm_paravirt_cr_pinning_init();
 	x86_platform.apic_post_init = kvm_apic_init;
 }
 
@@ -945,6 +948,67 @@ void __init kvm_spinlock_init(void)
 
 #endif	/* CONFIG_PARAVIRT_SPINLOCKS */
 
+int kvm_paravirt_cr_pinning_enabled __ro_after_init;
+
+void __init kvm_paravirt_cr_pinning_init(void)
+{
+	/*
+	 * We may end up in a state where this kernel has been kexec'd by a
+	 * kernel that has enabled pinning. There are two troublesome
+	 * possibilities at this point.
+	 *
+	 * 1. This kernel is not configured to use pinning
+	 * 2. This kernel was booted with disable_pv_cr_pin
+	 */
+	unsigned int i;
+	u64 already_on = 0;
+	const u32 check_msrs[] = {
+		MSR_KVM_CR0_PINNED_ZERO,
+		MSR_KVM_CR0_PINNED_ONE,
+		MSR_KVM_CR4_PINNED_ZERO,
+		MSR_KVM_CR4_PINNED_ONE,
+	};
+
+	if (!kvm_para_has_feature(KVM_FEATURE_CR_PIN))
+		goto kvm_paravirt_cr_pinning_not_enabled;
+
+	for (i = 0; i < ARRAY_SIZE(check_msrs) && !already_on; i++)
+		rdmsrl(check_msrs[i], already_on);
+
+	if (!IS_ENABLED(CONFIG_PARAVIRT_CR_PINNING) ||
+		cmdline_find_option_bool(boot_command_line, "disable_pv_cr_pin")) {
+		if (already_on)
+			WARN_ON_ONCE("Paravirtualized CR pinning enabled previously");
+		else
+			goto kvm_paravirt_cr_pinning_not_enabled;
+	}
+
+	kvm_paravirt_cr_pinning_enabled = 1;
+	return;
+
+kvm_paravirt_cr_pinning_not_enabled:
+	kvm_paravirt_cr_pinning_enabled = 0;
+}
+
+void kvm_setup_paravirt_cr_pinning(unsigned long cr0_pinned_bits,
+				   unsigned long cr0_pinned_mask,
+				   unsigned long cr4_pinned_bits,
+				   unsigned long cr4_pinned_mask)
+{
+	u64 mask;
+
+	if (!kvm_paravirt_cr_pinning_enabled)
+		return;
+
+	rdmsrl(MSR_KVM_CR0_PIN_ALLOWED, mask);
+	wrmsrl(MSR_KVM_CR0_PINNED_ZERO, ~cr0_pinned_bits & cr0_pinned_mask & mask);
+	wrmsrl(MSR_KVM_CR0_PINNED_ONE, cr0_pinned_bits & cr0_pinned_mask & mask);
+
+	rdmsrl(MSR_KVM_CR4_PIN_ALLOWED, mask);
+	wrmsrl(MSR_KVM_CR4_PINNED_ZERO, ~cr4_pinned_bits & cr4_pinned_mask & mask);
+	wrmsrl(MSR_KVM_CR4_PINNED_ONE, cr4_pinned_bits & cr4_pinned_mask & mask);
+}
+
 #ifdef CONFIG_ARCH_CPUIDLE_HALTPOLL
 
 static void kvm_disable_host_haltpoll(void *i)
-- 
2.21.0

